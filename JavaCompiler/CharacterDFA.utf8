··· 
Deterministic Finite Acceptor of Character Literals
Pattern: ^‵([^′]|\\[btnfr'"\\]|\\u[0-9A-Fa-f]{4})′$
···
import java.util.LinkedList

■ CharacterDFA⦂ DFA

  state⦂ State
  ≣ State
    GO · Start State
    ES · Escape Sequence
    US · Unicode Sequence
    WC · Waiting for Closing Delimiter
    OK · Accept State ( completed output )
    ER · Trap State ( erroneous input )

  openingDelimiter⦂ String
  closingDelimiter⦂ String°
  closingPosition⦂ int · walks through closingDelimiter in WC state
  value⦂ StringBuilder° · value of the output token

  ▶ reset
  ⏺ start⦂ String
    openingDelimiter: start
    if ∄ start
    or ¬ The.closingDelimiters.containsKey start
    or ¬ The.delimitedSequences.containsKey start
    or ¬ "Character" ≈ The.delimitedSequences.get start
       state: State.ER
    else
       closingDelimiter: The.closingDelimiters.get start
       closingPosition: 0
       value.setLength 0
       state: State.GO

  ▶ consume⦂ boolean
  ⏺ c⦂ Character
    ∢ state
      ⬩ GO
        if closingDelimiter.toString° ≈ String.valueOf c
           value.append c · shows erroneous input
           state: State.ER
           return false

        value.append '\\' if c = ‵'′ ∨ c = ‵"′
        value.append c
        state: c = '\\' ? State.ES ! State.WC

      ⬩ ES
        value.append c
        ∢ c
          ⬩ 'u' ⭆ state: State.US
          ⬩ 'b', 't', 'n', 'f', 'r', ‵'′, ‵"′, '\\' ⭆ state: State.WC
          else
            state: State.ER
            return false

      ⬩ US
        value.append c
        if 0 ≤ c.digit c, 16
           state: State.WC if value.length° = 6
        else
           state: State.ER
           return false

      ⬩ WC
        if closingDelimiter.length° > closingPosition
           if c = closingDelimiter.charAt closingPosition
              closingPosition◥
           else
              state: State.ER
              value.append closingDelimiter.substring 0, closingPosition
              value.append (c = '\n' ? ' ' ! c) · shows erroneous input
              return false
        else
           state: State.OK
           return false

      else · machine stopped in State.OK or State.ER
        return false

    return true

  ▶ getTokens⦂ LinkedList⟨Token⟩
    tokens⦂ LinkedList⟨Token⟩°
    if state = State.OK
       tokens.add *Token Lex.CHR, value.toString°
    else
       tokens.add *Token Lex.ERR, openingDelimiter ⊕ value.toString°
                                ⊕ " < INVALID CHARACTER LITERAL"
    return tokens
