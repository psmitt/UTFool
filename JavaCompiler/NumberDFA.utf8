···
Deterministic Finite Acceptor of Number Literals
Integer pattern: ^((0b[01]+)|(0o[0-7]+)|(0x[0-9A-Fa-f]+)|(0|[1-9]\d*))$
Decimal pattern: ^(0|[1-9]\d*)(\.\d+)?([Ee⏨][+-]?\d+)?$
···
import java.util.LinkedList

■ NumberDFA⦂ DFA

  state⦂ State
  ≣ State
    GO · Start State
    LZ · Leading Zero
    NS · Non-Decimal Start
    NE · Non-Decimal End
    DI · Decimal Integer Part
    DP · Decimal Point
    DF · Decimal Fractional Part
    DS · Decimal Exponent Start
    DX · Decimal Exponent End
    ER · Trap State ( erroneous input )

  value⦂ StringBuilder°
  radix⦂ int: 10 · decimal by default

  ▶ reset
  ⏺ start⦂ String · beginning sequence of a number literal
    value.setLength 0
    state: State.GO
    if ∃ start
       ∀ i ∈ 0…start.length°
         if ¬ consume start.charAt i
              value.append start.charAt i · shows erroneous input
              state: State.ER

  ▶ invalid⦂ boolean
  ⏺ c⦂ Character · should separate number literal from the next token
    if c.isLetterOrDigit c
       value.append c · shows erroneous input
       state: State.ER
    return false

  ▶ consume⦂ boolean
  ⏺ c⦂ Character
    ∢ state
      ⬩ GO · Start
        if c.isDigit c
           value.append c
           state: '0' = c ? State.LZ ! State.DI
        !! return false

      ⬩ LZ · Leading Zero
        state: State.NS
        ∢ c
          ⬩ 'b' ⭆ radix: 2
          ⬩ 'o' ⭆ radix: 8
          ⬩ 'x' ⭆ radix: 16
          ⬩ '.' ⭆ state: State.DP
          ⬩ 'E', 'e', '⏨'
            value.append 'e'
            state: State.DS
            return true
          ‼
            state: State.LZ · fallback 
            return invalid c

        value.append c

      ⬩ NS, NE · Non-Decimal Integer
        if 0 ≤ c.digit c, radix
           value.append c
           state: State.NE
        !! return invalid c

      ⬩ DI · Decimal Integer Part
        if c.isDigit c then value.append c
        ‼∢ c
           ⬩ '.'
             value.append c
             state: State.DP
           ⬩ 'E', 'e', '⏨'
             value.append 'e'
             state: State.DS
           ‼ return invalid c

      ⬩ DP · Decimal Point
        if c.isDigit c
           value.append c
           state: State.DF
        !! return invalid c

      ⬩ DF · Decimal Fractional Part
        if c.isDigit c then value.append c
        ‼∢ c
           ⬩ 'E', 'e', '⏨'
             value.append 'e'
             state: State.DS
           ‼ return invalid c

      ⬩ DS · Decimal Exponent Symbol
        isMinus⦂ boolean: The.operators.containsKey c
                        ∧ "Minus" ≈ The.operators.get c
        if c = '+' ∨ c = '-' ∨ isMinus
           value.append (isMinus ? '-' ! c)
           state: State.DX
           break

        fallthrough

      ⬩ DX · Decimal Exponent Part
        if c.isDigit c
           value.append c
           state: State.DX
           break

        fallthrough

      ‼ return invalid c · State.ER · Trap State

    return true

  ▶ getTokens⦂ LinkedList⟨Token⟩
    tokens⦂ LinkedList⟨Token⟩°
    ∢ state
      ⬩ LZ, NE, DI, DF, DX
        tokens.add *Token Lex.NUM, value.toString°
      ‼ tokens.add *Token Lex.ERR, value.toString°
                      ⊕ " < INVALID NUMBER FORMAT"
    return tokens
